import * as fs from 'fs'
import * as path from 'path'
import * as assert from 'assert'
import { factory } from '../../src/adapters/factories'
import { ConfigService } from '../../src/services/config.service'
import { dropDatabase } from '../util/mongodb-util'
import { SIGN_IN_ERRORS } from '../../src/errors/error-codes'

// public/private keys generated by:
// ssh-keygen -t rsa -b 4096 -m PEM -f authenzify-test-key

describe('Sign In', () => {
  const privateKey = fs.readFileSync(
    path.join(__dirname, '../keys/authenzify-test-key'),
    {
      encoding: 'ascii',
    },
  )

  const config = {
    verifyUserBy: 'AUTO',
    passwordPolicy: '',
    usernamePolicy: '',
    storage: 'mongodb',
    uri: 'mongodb://localhost:27017/users-management-test',
    saltLength: 32,
    passwordPrivateKey: '',
    privateKey,
  }
  describe(`Verify user sign-in`, () => {
    it('Should throw error when trying sign-in with wrong password', async () => {
      await dropDatabase(config.uri)
      const configService = new ConfigService(config)

      const services = await factory(configService)

      const user = await services.Users.signUp({
        email: 'haim@tictuk.com',
        password: '123456',
        firstName: 'Haim',
        lastName: 'Rubin',
      })

      try {
        await services.Users.signIn({
          email: 'haim@tictuk.com',
          password: '1234562',
        })
      } catch (error) {
        const { httpStatusCode, code, httpStatusText } = error
        assert.deepEqual(
          {
            httpStatusCode,
            code,
            httpStatusText,
          },
          SIGN_IN_ERRORS.INVALID_USERNAME_OR_PASSWORD,
        )
      }
    })
  })
})
