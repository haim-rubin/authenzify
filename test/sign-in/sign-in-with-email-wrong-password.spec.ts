import * as assert from 'assert'
import { factory } from '../../src/adapters/factories'
import { ConfigService } from '../../src/services/config.service'
import { dropDatabase } from '../util/mongodb-util'
import { SIGN_IN_ERRORS } from '../../src/errors/error-codes'
import { getConfig } from '../util/settings'
import { before } from 'mocha'

// public/private keys generated by:
// ssh-keygen -t rsa -b 1024 -m PEM -f authenzify-test-key
// ssh-keygen -f authenzify-test-key -e -m PKCS8 > authenzify-test-key.pub

describe('Sign In', () => {
  let services
  before(async () => {
    const config = await getConfig()
    await dropDatabase(config.uri)
    const configService = new ConfigService(config)
    services = await factory(configService)
  })

  describe(`Verify user sign-in`, () => {
    it('Should throw error when trying sign-in with wrong password', async () => {
      const credentials = {
        email: 'haim@tictuk.com',
        password: '1@Ea5S',
      }

      await services.Users.signUp({
        ...credentials,
        firstName: 'John',
        lastName: 'Doe',
      })

      try {
        await services.Users.signIn({
          ...credentials,
          password: credentials.password + '12',
        })
      } catch (error) {
        const { httpStatusCode, code, httpStatusText } = error
        assert.deepEqual(
          {
            httpStatusCode,
            code,
            httpStatusText,
          },
          SIGN_IN_ERRORS.INVALID_USERNAME_OR_PASSWORD,
        )
      }
    })
  })
})
